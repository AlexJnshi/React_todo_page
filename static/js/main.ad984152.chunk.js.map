{"version":3,"sources":["Create.js","Li.js","TodoUl.js","State.js","App.js","serviceWorker.js","index.js"],"names":["Create","addData","this","props","id","placeholder","autoComplete","type","onKeyDown","e","keyCode","target","value","PureComponent","Li","state","editing","ref","createRef","val","prevProps","prevState","current","focus","data","changeDone","deleteData","editText","className","onDoubleClick","setState","done","checked","onChange","text","onClick","onBlur","Todos","map","item","key","State","removeDone","filter","unDone","length","App","unshift","Date","now","forEach","TodoUl","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad984152.chunk.js","sourcesContent":["import React,{PureComponent} from 'react';\nclass Create extends PureComponent {\n  render(){\n      let {addData} = this.props\n    return (<div id=\"create-todo\">\n        <input \n          id=\"new-todo\" \n          placeholder=\"What needs to be done?\" \n          autoComplete=\"off\"\n          type=\"text\" \n          onKeyDown={(e)=>{\n            if(e.keyCode === 13){\n                addData(e.target.value)\n                e.target.value = ''\n            }\n          }}\n        />\n    </div>)\n  }\n}\n\nexport default Create;\n","import React, { PureComponent, createRef } from 'react';\nclass Li extends PureComponent {\n    state = {\n        editing: false,\n        ref: createRef(),\n        val: ''\n    }\n\n    //copy value from props to it's own state\n    static getDerivedStateFromProps(props, state) {\n        if (!state.editing) {\n            state.val = props.data.text\n        }\n        return true;\n    }\n\n    //get focus when user double click on item\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.editing && !prevState.editing) {\n            this.state.ref.current.focus()\n        }\n    }\n\n    render() {\n        let { val, ref, editing } = this.state\n        let { data, changeDone, deleteData, editText } = this.props\n\n        return (\n            <li\n                className={editing ? 'editing' : ''}\n                onDoubleClick={() => {\n                    this.setState({\n                        editing: true\n                    })\n                }\n                }\n            >\n                {/* display mode */}\n                <div className={\"todo \" + (data.done ? 'done' : '')}>\n                    <div className=\"display\">\n                        <input\n                            className=\"check\"\n                            type=\"checkbox\"\n                            checked={data.done}\n                            onChange={(e) => {\n                                changeDone(data.id, e.target.checked)\n                            }}\n                        />\n                        <div\n                            className=\"todo-content\"\n                        >{data.text}</div>\n                        <span\n                            className=\"todo-destroy\"\n                            onClick={() => {\n                                deleteData(data.id)\n                            }\n\n                            }></span>\n                    </div>\n\n                    {/* editing mode */}\n                    <div className=\"edit\">\n                        <input\n                            ref={ref}\n                            className=\"todo-input\"\n                            type=\"text\"\n                            value={val}\n                            onChange={(e) => {\n                                this.setState({\n                                    val: e.target.value\n                                })\n                            }}\n                            onBlur={() => {\n                                editText(data.id, val)\n                                this.setState({\n                                    editing: false\n                                })\n                            }}\n                            onKeyDown={(e) => {\n                                if (e.keyCode === 13) {\n                                    editText(data.id, val)\n                                    this.setState({\n                                        editing: false\n                                    })\n                                }\n                            }}\n\n                        />\n                    </div>\n                </div>\n            </li>\n        )\n    }\n}\n\nexport default Li;\n","import React, { PureComponent } from 'react';\nimport Li from './Li';\nclass Todos extends PureComponent {\n    render() {\n        let { data, changeDone, deleteData, editText } = this.props\n        return (<ul id=\"todo-list\">\n            {data.map(item =>\n                <Li\n                    key={item.id}\n                    data={item}\n                    changeDone={changeDone}\n                    deleteData={deleteData}\n                    editText={editText}\n                />)}\n        </ul>)\n    }\n}\n\nexport default Todos;\n","import React, { PureComponent } from 'react';\nclass State extends PureComponent {\n    render() {\n        let { data, removeDone } = this.props\n        let done = data.filter(item => item.done)\n        let unDone = data.filter(item => !item.done)\n        return (<div id=\"todo-stats\">\n            <span className=\"todo-count\">\n                <span className=\"number\">{unDone.length}</span>\n                <span className=\"word\">{unDone.length > 1 ? \" items\" : \" item\"} left.</span>\n            </span>\n            <span className=\"todo-clear\">\n                {done.length > 0 && <button onClick={() => {\n                    removeDone()\n                }}>\n                    Clear {done.length} completed {done.length > 1 ? 'items' : 'item'}\n                </button>}\n            </span>\n        </div>)\n    }\n}\n\nexport default State;\n","import React, { PureComponent } from 'react';\nimport Create from './Create'\nimport TodoUl from './TodoUl'\nimport State from './State'\nimport './App.css'\n\nclass App extends PureComponent {\n    state = {\n        data: [\n            {\n                id: 0,\n                text: \"Double click to edit text\",\n                done: false\n            }, {\n                id: 1,\n                text: \"Click right bottom button\",\n                done: false\n            }, {\n                id: 2,\n                text: \"Clear item\",\n                done: true\n            }\n        ]\n    }\n\n    //add text in list, using in Create component\n    addData = (text) => {\n        let { data } = this.state\n        data.unshift({\n            id: Date.now(),\n            text,\n            done: false\n        })\n        this.setState({\n            data: [...data]\n        })\n    }\n\n    //checkbox =>change data.done state, using in Li component\n    changeDone = (id, done) => {\n        let { data } = this.state\n        data.filter(item => item.id === id)[0].done = done\n        this.setState({\n            data: data.map(item => ({ ...item }))\n        })\n\n    }\n\n    //edit text when user double click item. using in Li component\n    editText = (id, text) => {\n        let { data } = this.state\n        data.forEach(item => {\n            if (item.id === id) {\n                item.text = text\n            }\n        })\n        this.setState({\n            data: data.map(item => ({ ...item }))\n        })\n    }\n\n    //delete data. click X button at end of each item. using in Li component\n    deleteData = (id) => {\n        let { data } = this.state\n        this.setState({\n            data: data.filter(item => item.id !== id)\n        })\n    }\n\n\n    //clear compleated items. using in State component\n    removeDone = () => {\n        let { data } = this.state\n        this.setState({\n            data: data.filter(item => !item.done)\n        })\n    }\n\n    render() {\n        let { data } = this.state\n        return (<div id=\"todoapp\" >\n            <div className=\"title\">\n                <h1>Todo list</h1>\n            </div>\n            <div className=\"content\">\n                <Create addData={this.addData} />\n                <TodoUl\n                    {...this.state}\n                    changeDone={this.changeDone}\n                    deleteData={this.deleteData} \n                    editText = {this.editText}/>\n                <State\n                    data={data}\n                    removeDone={this.removeDone}\n                />\n            </div>\n        </div>)\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}